}
#10% of parent population abundance
flop <- as.matrix(as.numeric(fax) * 0.1)
### pop is new species sizes and the new names
pop <- symp_sp
i <- 1
for (o in 1:length(symp_sp)) {
if (length(symp_sp[[o]]) >= 1) {
for (k in 1:length(symp_sp[[o]])) {
pop[[o]][k] <- flop[[i]]
i <- i + 1
}
}
pop[[o]] <- matrix(as.numeric(pop[[o]]))
}
i <- 1
for (o in 1:length(symp_sp)) {
if (length(symp_sp[[o]]) >= 1) {
m = 1:length(symp_sp[[o]])
for (k in 1:length(m)) {
rownames(pop[[o]])[m][k] = paste(triw[i], sep = "")
i <- i + 1
}
}
}
morto <- list()
for (o in 1:length(siteN)) {
for (h in 1:length(pop[[o]])) {
mart <- rbind(matrix_list4[[o]], pop[[o]])
morto[[o]] <- mart
}
}
# Fix empty row names
for (o in 1:length(siteN)) {
for (k in length(morto[[o]]))
if (length(rownames(morto[[o]])) < 1) {
rownames(morto[[o]]) <- rownames(matrix_list4[[o]])
}
}
matrix_list5 <- morto
} else {
matrix_list5 <- matrix_list4
}
if (NA %in% unlist(matrix_list5)) {
warning(
paste(
"NA in matrixlist5: problem with adding sympatric species to matrix list",
ipa
)
)
}
##list of speciating species
specspec <- append(unlist(allo_sp), unlist(symp_sp))
##list of new species that have already grown in tree
grownspec <- unlist(unique(append(symptrip, allotrip)))
allspec <-  unmatrixlist(matrix_list5)
##finding species that didn't speciate or grow or are extinct.
sop = setdiff(allspec, specspec)
sop2 = setdiff(sop, grownspec)
sop3 = setdiff(sop2, extincttotal)
ma <- test1
ma[[1]] <- unique(sop3)
#Updating survivors in tree
tree <- full.tree
if (length(sop3 > 1)) {
for (o in 1:length(siteN)) {
for (k in 1:length(ma[[o]])) {
if (ma[[o]][k] != 1) {
tree = surviveatx(tree, ma[[o]][k])
}
}
}
}
if (watchgrow) {
plot(tree, cex = .5)
}
SAD <- F
### RANKS ABUNDANCES AND DRAWS FROM SAD Fishers log series distribution
if (SAD) {
if (length(unmatrixlist(matrix_list5)) > 5) {
xx <- MakeSAD(matrix_list5, SADmarg, JmaxV)
matrix_list5 <- xx
}
}
GEO = F
if (GEO) {
if (length(unmatrixlist(matrix_list5)) > 5) {
xx <- MakeGEO(matrix_list5, JmaxV)
matrix_list5 <- xx
}
}
LOGNRM = T
source("~/Desktop/ETBDsim/R/ETBDsimFEB_08_2023SPC.R", echo=TRUE)
if (LOGNRM) {
if (length(unmatrixlist(matrix_list5)) > 5) {
xx <- MakeLogNormalSAD(matrix_list5, SADmarg, JmaxV)
matrix_list5 <- xx
}
}
matrix_list5
if (NA %in% unlist(matrix_list5)) {
warning(paste(
"NA in matrixlist5: problem with the SAD rank setting",
ipa
))
}
####### extinction #########
{
#calculate extinction probability
etip = list()
for (o in 1:length(siteN)) {
# extinctionp = 1 / (0.37 ^ 1.1) * exp(-1.1 * matrix_list5[[o]][, 1])
if (NegExpEx){
extinctionp = exp(exparm*matrix_list5[[o]][,1])
}
etip[[o]] <- extinctionp
}
for (o in 1:length(siteN)) {
for (i in 1:length(etip[[o]])) {
if (etip[[o]][i] > 1) {
etip[[o]][i] <- 1
}
}
}
#as logical...
etipp = list()
for (o in 1:length(siteN)) {
extlog = as.logical(rbinom(length(matrix_list5[[o]][, 1]), 1, etip[[o]]))
etipp[[o]] <- extlog
}
#name and position of extinct
extinct = list()
for (o in 1:length(siteN)) {
if (length(matrix_list5[[o]] > 0)) {
ex <- row.names(matrix_list5[[o]])[etipp[[o]]]
extinct[[o]] <- as.matrix(ex)
}
}
extinctx <- extinct
ext <- c()
for (o in 1:length(extinct)) {
if (length(extinct[[o]]) > 0) {
ext <- append(ext, (extinct[[o]]))
}
}
matrix_list6 <- matrix_list5
if (NA %in% unlist(matrix_list6)) {
warning(paste(
"NA in matrixlist6: problem with the extinction",
ipa
))
}
for (o in 1:length(extinctx)) {
if (length(extinctx) > 0) {
if (length(extinctx[[o]]) > 0) {
#prune the extinct from table
m = match(extinctx[[o]], row.names(matrix_list5[[o]]))
matrix_list6[[o]][m, 1] = 0
}
}
}
extincttotal = c(extincttotal, ext)
summat <- sum(unlist(matrix_list6))
if (sum(summat) == 0){
stop('everything is dead')
}
####adding a stall for equilibrium
### dd needs to equal the species sum at each time step. need to save separately
#
#             site_fifteen_sp <-  append(site_fifteen_sp, length(unlist(matrix_list6[[length(matrix_list6)]])))
#
#
#             TS = 10000 ## time at equilibrium
#             SDd = 3 ## max deviation allowed for equilibrium
#
#             if (length(site_fifteen_sp) > TS) {
#               for (i in 1:(length(site_fifteen_sp)-TS)) {
#                 ss <- site_fifteen_sp[i:(i + TS)]
#                 sdss <- sd(ss)
#
#               }
#             }
#
#
#             if (sdss < SDd) {
#               print(paste("equilibrium reached SD:", sdss, "time:", ipa))
#               break
#
#               end
#
#             }
#
#
# break if a site goes extinct
# break if we reach equilibrium
#300 time steps within some range 10 species?
#   ##growing things based on grow
#   for (o in 1:length(siteN)) {
#     if (length(matrix_list6[[o]]) > 0) {
#       for (k in 1:length(matrix_list6[[o]])) {
#         matrix_list6[[o]][[k]] <-
#           matrix_list6[[o]][[k]] + matrix_list6[[o]][[k]] / grow[o]
#       }
#     }
#   }
# }
# ### RANKS ABUNDANCES AND DRAWS FROM SAD Fishers log series distribution
# if (SAD) {
#   if (length(unmatrixlist(matrix_list5)) > 5) {
#     xx <- MakeSAD(matrix_list6, SADmarg, JmaxV)
#     matrix_list6 <- xx
#   }
# }
###### End of simulation
####Starts again with matrix_list6 at the start
#
#
# ####everything beyond this point is just to help me catch issues
# x <- unmatrixlist(matrix_list6)
#
# length(unique(x))
# length(tree$tip.label)
#
#
# ### species in matrix but not in the tree
# for (o in 1:length(x)){
#   if (x[o] %!in% tree$tip.label){
#     print(paste(x[o], "not in tree"))
#
#   }
# }
#   hecklist <- c()
#   i <- 1
# ##species in the tree but not in the martix .............
# for (o in 1:length(tree$tip.label)){
#   if (tree$tip.label[o] %!in% x && tree$tip.label[[o]] %!in% extincttotal){
#     print(paste(tree$tip.label[o], "not in matrix"))
#     hecklist[[i]] <- append(hecklist, tree$tip.label[o])
#     i <- 1+i
#   }
# }
#
#   if(length(hecklist) > 0){
#   for ( o in 1:length(hecklist)){
#     if ( hecklist[o] %in% unlist(symptrip)){
#       print ("in sympatric speciating list")
#     }
#   }
#
#
#       for ( o in 1:length(hecklist)){
#         if ( hecklist[o] %!in% unlist(tri)){
#           print ("not in tri")
#         }
#       }
#
#
#       for ( o in 1:length(hecklist)){
#         if ( hecklist[o] %in% unmatrixlist(pop)){
#           print ("in pop")
#         }
#       }
#
#   for ( o in 1:length(hecklist)){
#     if ( hecklist[o] %in% unlist(allotrip)){
#       print ("in allopatric speciating list")
#     }
#   }
# }
#
#     ##species in the tree but not in the martix .............
#     for (o in 1:length(tree$tip.label)){
#       if (tree$tip.label[o] %!in% x && tree$tip.label[[o]] %!in% extincttotal){
#         print(paste(tree$tip.label[o], "not in matrix"))
#       }
#     }
#
#
#
}
NegExpEx = T
exparm = -0.7
if (NA %in% unlist(matrix_list5)) {
warning(paste(
"NA in matrixlist5: problem with the SAD rank setting",
ipa
))
}
####### extinction #########
{
#calculate extinction probability
etip = list()
for (o in 1:length(siteN)) {
# extinctionp = 1 / (0.37 ^ 1.1) * exp(-1.1 * matrix_list5[[o]][, 1])
if (NegExpEx){
extinctionp = exp(exparm*matrix_list5[[o]][,1])
}
etip[[o]] <- extinctionp
}
for (o in 1:length(siteN)) {
for (i in 1:length(etip[[o]])) {
if (etip[[o]][i] > 1) {
etip[[o]][i] <- 1
}
}
}
#as logical...
etipp = list()
for (o in 1:length(siteN)) {
extlog = as.logical(rbinom(length(matrix_list5[[o]][, 1]), 1, etip[[o]]))
etipp[[o]] <- extlog
}
#name and position of extinct
extinct = list()
for (o in 1:length(siteN)) {
if (length(matrix_list5[[o]] > 0)) {
ex <- row.names(matrix_list5[[o]])[etipp[[o]]]
extinct[[o]] <- as.matrix(ex)
}
}
extinctx <- extinct
ext <- c()
for (o in 1:length(extinct)) {
if (length(extinct[[o]]) > 0) {
ext <- append(ext, (extinct[[o]]))
}
}
matrix_list6 <- matrix_list5
if (NA %in% unlist(matrix_list6)) {
warning(paste(
"NA in matrixlist6: problem with the extinction",
ipa
))
}
for (o in 1:length(extinctx)) {
if (length(extinctx) > 0) {
if (length(extinctx[[o]]) > 0) {
#prune the extinct from table
m = match(extinctx[[o]], row.names(matrix_list5[[o]]))
matrix_list6[[o]][m, 1] = 0
}
}
}
extincttotal = c(extincttotal, ext)
summat <- sum(unlist(matrix_list6))
if (sum(summat) == 0){
stop('everything is dead')
}
####adding a stall for equilibrium
### dd needs to equal the species sum at each time step. need to save separately
#
#             site_fifteen_sp <-  append(site_fifteen_sp, length(unlist(matrix_list6[[length(matrix_list6)]])))
#
#
#             TS = 10000 ## time at equilibrium
#             SDd = 3 ## max deviation allowed for equilibrium
#
#             if (length(site_fifteen_sp) > TS) {
#               for (i in 1:(length(site_fifteen_sp)-TS)) {
#                 ss <- site_fifteen_sp[i:(i + TS)]
#                 sdss <- sd(ss)
#
#               }
#             }
#
#
#             if (sdss < SDd) {
#               print(paste("equilibrium reached SD:", sdss, "time:", ipa))
#               break
#
#               end
#
#             }
#
#
# break if a site goes extinct
# break if we reach equilibrium
#300 time steps within some range 10 species?
#   ##growing things based on grow
#   for (o in 1:length(siteN)) {
#     if (length(matrix_list6[[o]]) > 0) {
#       for (k in 1:length(matrix_list6[[o]])) {
#         matrix_list6[[o]][[k]] <-
#           matrix_list6[[o]][[k]] + matrix_list6[[o]][[k]] / grow[o]
#       }
#     }
#   }
# }
# ### RANKS ABUNDANCES AND DRAWS FROM SAD Fishers log series distribution
# if (SAD) {
#   if (length(unmatrixlist(matrix_list5)) > 5) {
#     xx <- MakeSAD(matrix_list6, SADmarg, JmaxV)
#     matrix_list6 <- xx
#   }
# }
###### End of simulation
####Starts again with matrix_list6 at the start
#
#
# ####everything beyond this point is just to help me catch issues
# x <- unmatrixlist(matrix_list6)
#
# length(unique(x))
# length(tree$tip.label)
#
#
# ### species in matrix but not in the tree
# for (o in 1:length(x)){
#   if (x[o] %!in% tree$tip.label){
#     print(paste(x[o], "not in tree"))
#
#   }
# }
#   hecklist <- c()
#   i <- 1
# ##species in the tree but not in the martix .............
# for (o in 1:length(tree$tip.label)){
#   if (tree$tip.label[o] %!in% x && tree$tip.label[[o]] %!in% extincttotal){
#     print(paste(tree$tip.label[o], "not in matrix"))
#     hecklist[[i]] <- append(hecklist, tree$tip.label[o])
#     i <- 1+i
#   }
# }
#
#   if(length(hecklist) > 0){
#   for ( o in 1:length(hecklist)){
#     if ( hecklist[o] %in% unlist(symptrip)){
#       print ("in sympatric speciating list")
#     }
#   }
#
#
#       for ( o in 1:length(hecklist)){
#         if ( hecklist[o] %!in% unlist(tri)){
#           print ("not in tri")
#         }
#       }
#
#
#       for ( o in 1:length(hecklist)){
#         if ( hecklist[o] %in% unmatrixlist(pop)){
#           print ("in pop")
#         }
#       }
#
#   for ( o in 1:length(hecklist)){
#     if ( hecklist[o] %in% unlist(allotrip)){
#       print ("in allopatric speciating list")
#     }
#   }
# }
#
#     ##species in the tree but not in the martix .............
#     for (o in 1:length(tree$tip.label)){
#       if (tree$tip.label[o] %!in% x && tree$tip.label[[o]] %!in% extincttotal){
#         print(paste(tree$tip.label[o], "not in matrix"))
#       }
#     }
#
#
#
}
matrix_list6
matrix_list6[[4]]
matrix_list6[[4]] <- NULL
matrix_list6
matrix_list1
#start
matrix_list0 <- matrix_list6
##deleting extinct species from matrix list 6 from previous step
matrix_list1 <- DeleteExtinct(matrix_list0, siteN)
load("~/Desktop/ETBD/Code/testmatrix.RData")
matrix_list1
matrix_list
matrix_list[[1]]
matrix_list[[1]] <- NA
matrix_list[[1]]
matrix_list
mat <- matrix_list1
matrix_list1
matrix_list1
matrix_list1[[1]] <- NA
matrix_list1
#start
matrix_list0 <- matrix_list6
##deleting extinct species from matrix list 6 from previous step
matrix_list1 <- DeleteExtinct(matrix_list0, siteN)
for (e in 1:length(matrix_list1)){
if (length(matrix_list1[[e]]) < 1){
print("site", e, "has gone extinct")
}
}
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
library(ETBDsim)
